# load  and prepare data
airbnb <- readRDS("/Users/marquach/Desktop/R_Projects/semi-structured_distributional_regression/application/airbnb/munich_clean.RDS")
airbnb$days_since_last_review <- as.numeric(
difftime(airbnb$date, airbnb$last_review)
)
y = log(airbnb$price)
deep_model_tf <- function(x){
x %>%
layer_dense(units = 5, activation = "relu", use_bias = FALSE) %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 3, activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1, activation = "linear")
}
deep_model_torch <- function() nn_sequential(
nn_linear(in_features = 2, out_features = 5, bias = F),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 5, out_features = 3, bias = T),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 3, out_features = 1))
mod_tf <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1),
orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_tf),
engine = "tf"
)
devtools::load_all()
devtools::load_all()
warnings()
mod_tf <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1),
orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_tf),
engine = "tf"
)
orthog_options = orthog_control(orthogonalize = F)
# load  and prepare data
airbnb <- readRDS("/Users/marquach/Desktop/R_Projects/semi-structured_distributional_regression/application/airbnb/munich_clean.RDS")
airbnb$days_since_last_review <- as.numeric(
difftime(airbnb$date, airbnb$last_review)
)
y = log(airbnb$price)
deep_model_tf <- function(x){
x %>%
layer_dense(units = 5, activation = "relu", use_bias = FALSE) %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 3, activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1, activation = "linear")
}
deep_model_torch <- function() nn_sequential(
nn_linear(in_features = 2, out_features = 5, bias = F),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 5, out_features = 3, bias = T),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 3, out_features = 1))
mod_tf <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1),
orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_tf),
engine = "tf"
)
mod_torch <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1), orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_torch),
engine = "torch"
)
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10)
res_cv_torch <- mod_torch %>% cv(plot = F, cv_folds = 3, epochs = 10)
devtools::load_all()
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10)
debugonce(cv)
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10)
x_train
str(x_train)
lapply(x_train, function(x)
subset_array(x, train_ind))
subset_array
x
train_ind
na_handler
mod_tf %>% fit(epochs = 10, validation_split = 0.2, verbose = T)
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
debugonce(fit)
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
input_x
debugonce(prepare_data)
prepare_data(object$init_params$parsed_formulas_content,
gamdata = object$init_params$gamdata$data_trafos,
engine = object$engine)
na_handler
na_handler(ret_list)
?na_omit_list
deepregression:::na_omit_list
debugonce(na_handler)
ret_list
loop_through_pfc_and_call_trafo
datalist
mod_torch
debugonce(fit)
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
object$init_params$parsed_formulas_content
object$init_params$gamdata$data_trafos
prepare_data(object$init_params$parsed_formulas_content,
gamdata = object$init_params$gamdata$data_trafos,
engine = object$engine)
str(input_x)
object
input_x
str(input_x)
debugonce(prepare_data)
prepare_data(object$init_params$parsed_formulas_content,
gamdata = object$init_params$gamdata$data_trafos,
engine = object$engine)
pfc
pfc
pfc[[1]]
length(pfc)
pfc[[i]]
length(pfc[[i]])
!is.null(pfc[[i]][[j]]$gamdata_nr
)
!is.null(pfc[[i]][[j]]$gamdata_nr) & engine == 'tf'
pfc[[i]][[j]]
devtools::load_all()
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
debugonce(fit)
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
input_x
str(input_x,1)
debugonce(prepare_data)
prepare_data(object$init_params$parsed_formulas_content,
gamdata = object$init_params$gamdata$data_trafos,
engine = object$engine)
data_list
devtools::load_all()
mod_torch %>% fit(epochs = 10, validation_split = 0.2)
mod_tf %>% fit(epochs = 10, validation_split = 0.2, verbose = T)
fitted_vals_tf <- mod_tf %>% fitted()
fitted_vals_torch <- mod_torch %>% fitted()
cor(data.frame(fitted_vals_tf, fitted_vals_torch, y))
orthog_options = orthog_control(orthogonalize = F)
# load  and prepare data
airbnb <- readRDS("/Users/marquach/Desktop/R_Projects/semi-structured_distributional_regression/application/airbnb/munich_clean.RDS")
airbnb$days_since_last_review <- as.numeric(
difftime(airbnb$date, airbnb$last_review)
)
y = log(airbnb$price)
deep_model_tf <- function(x){
x %>%
layer_dense(units = 5, activation = "relu", use_bias = FALSE) %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 3, activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1, activation = "linear")
}
deep_model_torch <- function() nn_sequential(
nn_linear(in_features = 2, out_features = 5, bias = F),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 5, out_features = 3, bias = T),
nn_relu(),
nn_dropout(p = 0.2),
nn_linear(in_features = 3, out_features = 1))
mod_tf <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1),
orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_tf),
engine = "tf"
)
mod_torch <- deepregression(y = y, data = airbnb,
list_of_formulas =
list(
location = ~ 1 + beds +
s(accommodates, bs = "ps") +
s(days_since_last_review, bs = "tp") +
deep(review_scores_rating, reviews_per_month),
scale = ~1), orthog_options = orthog_options,
list_of_deep_models = list(deep = deep_model_torch),
engine = "torch"
)
mod_tf %>% fit(epochs = 100, validation_split = 0.2, verbose = T)
mod_torch %>% fit(epochs = 100, validation_split = 0.2)
fitted_vals_tf <- mod_tf %>% fitted()
fitted_vals_torch <- mod_torch %>% fitted()
cor(data.frame(fitted_vals_tf, fitted_vals_torch, y))
plot(fitted_vals_tf, fitted_vals_torch)
abline(a = 0,b = 1)
coef(mod_tf)
coef(mod_torch)
cbind(unlist(coef(mod_tf, type="linear")),
unlist(coef(mod_torch, type="linear")))
coef(mod_tf, type="smooth")
coef(mod_torch, type="smooth")
cbind(coef(mod_tf, type="smooth")[[1]],
coef(mod_torch, type="smooth")[[1]])
cbind(coef(mod_tf, type="smooth")[[2]],
coef(mod_torch, type="smooth")[[2]])
coef(mod_tf, which_param = 1)
coef(mod_torch, which_param = 1)
coef(mod_tf, which_param = 2)
coef(mod_torch, which_param = 2)
plot(mod_tf, which = 2)
mod_torch_data <- plot(mod_torch,  which = 2, only_data = T)
points(mod_torch_data[[1]]$value, mod_torch_data[[1]]$partial_effect,
col = "green")
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10)
res_cv_torch <- mod_torch %>% cv(plot = F, cv_folds = 3, epochs = 10)
res_cv_torch
plot(res_cv_torch)
plot_cv(res_cv_tf, engine = "tf")
plot_cv(res_cv_torch, engine = "torch")
plot_cv(res_cv_torch, engine = "torch")
res
str(res)
str(res1)
str(res,1)
res[[1]]
res[[1]]$records
res[[1]]$ctx
res[[1]]$model
plot_cv(res_cv_tf, engine = "tf")
res
lapply(res, "[[", "weighthistory")
weightshist
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10, save_weights = T)
plot_cv(res_cv_tf, engine = "tf")
weightshist
plot_cv(res_cv_tf, engine = "tf")
debugonce(plot_cv)
plot_cv(res_cv_tf, engine = "tf")
debugonce(cv)
# Cross validation
res_cv_tf <- mod_tf %>% cv(plot = F, cv_folds = 3, epochs = 10, save_weights = T)
save_weights
WeightHistory$new()
WeightHistory
args
input_list_model[!names(input_list_model) %in%
names(args)]
args
str(args,1)
str(args$callbacks,1)
ret
weighthistory
weighthistory$weights_last_layer
args$epochs
weighthistory
weighthistory$weights_last_layer
x
x$model$weights
weighthistory$weights_last_layer
x$model$weights
weighthistory$weights_last_layer
x$model$weights
weighthistory$weights_last_layer
ret
ret
weighthistory
ret$weighthistory
str(ret)
str(ret,1)
attributes(ret)
debugonce(cv)
res_cv_torch <- mod_torch %>% cv(plot = F, cv_folds = 3, epochs = 10)
ret
str(ret,1)
str(ret$ctx,1)
str(ret$records,1)
str(ret$records$profile,1)
str(ret$records$profile$fit,1)
str(ret$records$profile$train,1)
str(ret$ctx,1)
ret %>% get_weights_torch()
ret$model() %>% get_weights_torch()
ret$model %>% get_weights_torch()
x
ret$model
ret$model$distr_parameters
ret$model$parameters
length(ret$model$parameters)
get_weights_torch
get_weights_torch(ret)
debugonce(get_weights_torch)
get_weights_torch(ret)
model
str(model,1)
model$model$amount_distr_parameters
model$model$state_dict
model$model$state_dict()
model$model$state_dict()
model$model$metrics
